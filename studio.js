(() => {
  // ====== DOM helpers ======
  const $ = (s, r=document) => r.querySelector(s);
  const $$ = (s, r=document) => Array.from(r.querySelectorAll(s));
  const clamp = (v,a,b) => Math.max(a, Math.min(b, v));

  // ====== Elements ======
  const paint = $('#paintCanvas');
  const grid  = $('#gridCanvas');
  const pctx  = paint.getContext('2d', { willReadFrequently: true });
  const gctx  = grid.getContext('2d');

  const gridSel  = $('#gridSize');
  const GRID_PREF_KEY = 'gridOn';
  const zoomSel  = $('#zoom');
  const zoomLbl  = $('#zoomLabel');
  const stage    = $('#stage');
  const gridBtn  = $('#toggleGrid');
  const clearBtn = $('#clearAll');
  const dlBtn    = $('#downloadPng');

  // tool buttons (square grid)
  const toolCursor = $('#toolCursor');
  const toolPencil = $('#toolPencil');
  const toolBrush     = $('#toolBrush');
  const brushPopover  = $('#brushSizePopover');
  const toolEraser = $('#toolEraser');
  const toolPicker = $('#toolPicker');
  const toolFill   = $('#toolFill');
  const toolLine   = $('#toolLine');
  const toolRect   = $('#toolRect');
  const toolRectF  = $('#toolRectF');
  const toolCirc   = $('#toolCirc');
  const toolCircF  = $('#toolCircF');
  const toolUndo   = $('#toolUndo');
  const toolRedo   = $('#toolRedo');

  // import + generate
  const upInput = $('#uploader');
  const genBtn  = $('#genBtn');
  const genHint = $('#genHint');

  // ====== State ======
  let lastImage = null;
  let _lastObjUrl = null;
  let gridN = 32;
  let _gridPattern = null;
  let brushSize = 3;
  let eraserSize = 3;
  let zoom = 12;
  let showGrid = JSON.parse(localStorage.getItem(GRID_PREF_KEY) ?? 'true');

  const BRUSH_SIZES = [1,2,3,4,6,8,12];
  const ERASER_SIZES = BRUSH_SIZES;

  const state = {
    tool: 'pencil', // pencil | eraser | picker | fill | line | rect | rectf | circ | circf
    color: '#000000',
    down: false,
    last: null,
    quickErase: false,
  };

  // undo/redo stacks
  const undoStack = [];
  const redoStack = [];
  const MAX_STACK = 50;

    // --- Tool cursors (inline SVG -> data URI)
  function makeCursor(svg, hotX, hotY, fallback = 'crosshair'){
    const uri = 'data:image/svg+xml;utf8,' + encodeURIComponent(svg);
    return `url("${uri}") ${hotX} ${hotY}, ${fallback}`;
  }

  const SVG_PENCIL = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xml:space="preserve">
  <path fill="#FF6097" d="M513 109.583c-1.201 1.128-2.615 1.626-3.573 2.581-19.594 19.52-39.137 39.092-59.296 58.618-18.158-17.566-35.711-35.097-53.185-52.974 1.314-1.882 2.42-3.546 3.803-4.934a29874 29874 0 0 1 54.946-54.96c1.4-1.399 2.975-2.623 4.773-3.808 16.393 16.222 32.468 32.339 48.604 48.394 1.074 1.07 2.608 1.677 3.928 2.5z" data-index="2" style="opacity:1"/>
  <path fill="#FF8FB8" d="M460.163 53.987c-1.493 1.304-3.067 2.528-4.468 3.926a29874 29874 0 0 0-54.946 54.961c-1.383 1.388-2.489 3.052-4.018 4.894-.296.306-.727.219-.858-.088-5.255-5.508-10.37-10.717-15.501-15.909-12.478-12.625-24.964-25.243-37.446-37.863 19.347-19.463 38.698-38.924 58.035-58.397 1.281-1.29 2.46-2.682 3.363-4.269 1.065-.242 2.454-.242 3.935 0 1.319 1.586 2.498 2.976 3.777 4.266 16.034 16.168 32.082 32.321 48.127 48.479" data-index="3"/>
  <path fill="#55479E" d="M84.039 484.873c-25.268 8.738-50.537 17.473-75.795 26.239-.56.194-.996.752-1.367 1.514C5 513 3 513 1.265 512.303c17.877-18.173 35.493-35.646 53.086-53.142.692-.688 1.158-1.603 1.963-2.35.234.062.695.208.816.518 9.05 9.388 17.98 18.466 26.909 27.544" data-index="5" style="opacity:1"/>
  <path fill="#6E61B7" d="M56.081 456.749c-.572.81-1.038 1.724-1.73 2.412a25065 25065 0 0 1-53.086 52.642C1 510.611 1 509.223 1 507.417c.923-1.573 2.248-2.588 2.708-3.906 6.813-19.49 13.503-39.023 20.244-58.539 1.644-4.76 3.368-9.493 5.444-14.505 9.154 8.583 17.92 17.432 26.685 26.282" data-index="6" style="opacity:1"/>
  <path fill="#FED843" d="M56.15 351.19c1.087-1.375 2.05-2.875 3.28-4.107 87.286-87.332 174.593-174.643 262.32-261.76a5892 5892 0 0 1 53.018 53.062c.004.228-.058.68-.314.842a569069 569069 0 0 0-262.551 262.406c-.697.697-1.254 1.535-2.155 2.132-16.536-16.383-32.783-32.6-49.065-48.782-1.393-1.384-3.017-2.534-4.533-3.792" data-index="7" style="opacity:1"/>
  <path fill="#FFE1BA" d="M56.074 351.562c1.592.887 3.216 2.037 4.609 3.42 16.282 16.183 32.53 32.4 49.083 49.027.296.418.368.9.064 1.064a1844 1844 0 0 0-17.717 17.28c-11.707 11.55-23.403 23.11-35.104 34.666 0 0-.461-.146-.695-.208-8.998-8.912-17.764-17.76-26.837-26.725 8.635-26.127 17.578-52.14 26.597-78.524" data-index="8" style="opacity:1"/>
  <path fill="#F0F7FF" d="M374.764 138.157c-17.53-17.547-35.062-35.093-52.72-52.96 6.666-7.232 13.46-14.142 20.568-21.171 12.796 12.502 25.282 25.12 37.76 37.745 5.131 5.192 10.246 10.4 15.33 16.199-7.005 7.127-13.972 13.657-20.938 20.187" data-index="9"/>
  <path fill="#FABF2C" d="M110.134 404.91s-.072-.483-.09-.726c.605-1.016 1.162-1.854 1.859-2.551 87.425-87.422 174.86-174.833 262.767-262.134 2.009 1.35 3.67 2.464 5.062 3.849 12.168 12.103 24.264 24.28 36.436 36.38 4.24 4.214 8.634 8.273 12.957 12.403-.758.866-1.468 1.78-2.28 2.592a3595983 3595983 0 0 1-261.503 261.501c-.589.589-1.203 1.151-2.25 1.38-17.95-17.795-35.454-35.245-52.958-52.695" data-index="10" style="opacity:1"/>
  <path fill="#FFBFAB" d="M109.83 405.073c17.808 17.286 35.312 34.736 52.917 52.493-25.922 9.259-51.945 18.212-78.338 27.236-9.3-9.007-18.23-18.085-27.28-27.473 11.58-11.866 23.277-23.426 34.984-34.976a1844 1844 0 0 1 17.717-17.28" data-index="11"/>
  <path fill="#DFE7F4" d="M429.432 191.996a255 255 0 0 1-13.264-12.269c-12.172-12.099-24.268-24.276-36.436-36.379-1.392-1.385-3.053-2.499-4.806-4.01-.216-.272-.154-.725-.158-.953 6.962-6.758 13.929-13.288 21.066-20.108.17-.29.601-.203.817-.163 17.769 17.571 35.322 35.102 53.174 52.799-6.495 7.093-13.29 14.02-20.393 21.083" data-index="12" style="opacity:1"/>
</svg>`;
  const PENCIL_CURSOR_URI = makeCursor(SVG_PENCIL, 3, 47);
  const SVG_BRUSH = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xml:space="preserve">
  <path fill="#E63A51" d="M513 46.583c-3.25 3.896-6.741 7.183-9.707 10.89-11.032 13.79-21.909 27.704-32.81 41.598-9.183 11.701-18.266 23.482-27.491 35.15-9.65 12.203-19.449 24.29-29.125 36.473-9.66 12.161-19.207 24.41-28.879 36.56-8.57 10.768-17.275 21.428-25.862 32.182-8.781 10.996-17.442 22.088-26.255 33.058a191 191 0 0 1-12.596 14.161c-14.34-14.038-28.183-27.946-41.868-42.121.945-1.125 1.699-2.015 2.52-2.837 70.487-70.495 140.977-140.986 211.48-211.464 1.168-1.169 2.5-2.173 3.757-3.254 5.448 5.219 10.897 10.438 16.59 15.339.246 1.07.246 2.46.246 4.265" data-index="2" style="opacity:1"/>
  <path fill="#FFB64C" d="M20.9 502.83c-6.351-.602-12.702-1.204-19.476-1.818C1 500.25 1 499.5 1 498.375c.967-.826 2.15-1.057 2.867-1.763 6.996-6.899 13.99-13.803 20.83-20.857 4.729-4.876 6.649-11.19 7.195-17.68.761-9.047.565-18.169 1.15-27.235 1.332-20.657 5.307-40.486 17.475-57.994 12.453-17.917 29.724-28.65 50.428-33.627 10.715-2.575 21.975-2.886 33.603-3.924 9.268 8.887 17.921 17.476 26.679 26.262.333.577.562.959.442 1.388-2.014 1.382-3.821 2.575-5.322 4.074q-60.284 60.2-120.503 120.463c-5.047 5.051-9.966 10.229-14.945 15.348" data-index="3" style="opacity:1"/>
  <path fill="#FF637B" d="M496.015 26.671c-1.107 1.389-2.44 2.393-3.608 3.562-70.503 70.478-140.993 140.97-211.48 211.464-.821.822-1.575 1.712-2.696 2.857-.335.287-.683.334-.885.046-13.941-14.086-27.68-27.883-41.42-41.68 6.596-5.615 13.086-11.36 19.811-16.814 10.776-8.739 21.707-17.286 32.572-25.914 12.785-10.152 25.596-20.273 38.348-30.467 13.79-11.022 27.472-22.18 41.303-33.152 11.757-9.326 23.714-18.402 35.483-27.715 12.179-9.638 24.184-19.496 36.364-29.133 11.902-9.418 24.023-18.562 35.832-28.094 2.742-2.214 4.12-1.518 6.134.58 4.61 4.802 9.386 9.445 14.242 14.46" data-index="4"/>
  <path fill="#E0F4FF" d="M235.611 203.043c14.055 13.674 27.794 27.471 41.508 41.84-27.684 28.29-55.328 56.026-83.009 83.724-10.953 10.96-21.989 21.838-32.987 32.754-8.654-8.59-17.307-17.18-26.12-26.069 8.35-15.578 15.858-31.535 25.632-45.956 11.619-17.143 24.556-33.51 38.102-49.194 11.303-13.088 24.308-24.706 36.874-37.099" data-index="5" style="opacity:1"/>
  <path fill="#FF9101" d="M21.323 502.915c4.555-5.204 9.474-10.382 14.521-15.433q60.22-60.263 120.503-120.463c1.501-1.499 3.308-2.692 5.603-3.884 9.052 8.714 17.473 17.285 25.895 25.857.684 17.72-1.605 35.022-9.556 50.973-3.583 7.19-8.668 13.791-13.887 19.971-10.87 12.873-24.12 22.798-39.573 29.73-13.385 6.004-27.207 10.463-41.79 12.324-6.324.808-12.682 1.353-19.954 2.022-10.682.016-20.435.026-30.189.037-3.716-.35-7.433-.7-11.573-1.134" data-index="6" style="opacity:1"/>
  <path fill="#9BBBDB" d="M188.02 388.67c-8.597-8.25-17.018-16.821-25.72-25.582-.511-.572-.74-.954-1.073-1.531 10.894-11.112 21.93-21.99 32.883-32.95a65848 65848 0 0 0 83.21-83.436c.228-.283.576-.33.752-.35 14.02 13.888 27.864 27.796 41.902 41.987-10.927 11.844-21.49 24.013-33.293 34.829-19.869 18.207-41.315 34.534-64.538 48.308-11.063 6.562-22.617 12.295-34.124 18.725" data-index="7" style="opacity:1"/>
  <path fill="#FF9F1C" d="M33.132 504.42c9.518-.382 19.271-.392 29.5-.388-1.362.333-3.197.916-5.035.924-8.076.035-16.153-.095-24.465-.537" data-index="8"/>
</svg>`;

  const SVG_ERASER = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xml:space="preserve">
  <path fill="#FF5F96" d="M352.888 352.44c-23.29 23.354-46.568 46.722-69.874 70.061-19.896 19.923-39.824 39.813-60.193 60.153-1.781 1.676-3.172 2.856-4.427 4.166C207.661 498.025 197.048 509.39 181 513c-6.688 0-13.375 0-20.209-.298-3.873-2.107-8.056-3.34-11.234-5.848a223 223 0 0 1-18.83-16.694c-17.714-17.568-35.203-35.363-52.719-53.413 1.537-2.115 2.885-4.014 4.508-5.638 56.353-56.397 112.735-112.766 169.092-169.16 1.63-1.63 3.036-3.488 4.821-5.158.642.186 1.01.289 1.532.688 31.745 31.851 63.336 63.406 94.927 94.96" data-index="2" style="visibility:visible;opacity:1"/>
  <path fill="#6AA9FF" d="M353.18 352.226c-31.883-31.341-63.474-62.896-95.045-95.051 1.376-2.057 2.69-3.557 4.096-4.964 35.713-35.73 71.437-71.447 107.154-107.172 2.33-2.33 4.62-4.698 7.237-6.985 1.818 1.344 3.425 2.527 4.822 3.92 15.08 15.033 30.188 30.04 45.13 45.21 2.62 2.659 4.262 2.773 6.804.006 4.386-4.774 8.96-9.403 13.762-13.755 3.345-3.032 2.899-5.1-.138-8.083-14.358-14.108-28.523-28.411-42.756-42.645-6.705-6.705-6.625-6.622-13.442-.026-4.734 4.582-9.726 8.897-14.914 13.188a1661 1661 0 0 1-20.583-20.097c-9.56-9.505-19.128-19.005-28.528-28.668-1.038-1.068-1.916-4.038-1.314-4.687 6.18-6.67 12.681-13.043 19.36-19.768 1.848 1.74 3.186 2.937 4.454 4.203 13.895 13.88 27.78 27.77 41.667 41.658 7.487 7.486 7.448 7.447 15.174-.182 10.292-10.162 20.65-20.256 31.295-30.263 20.514 20.321 40.709 40.532 60.918 60.728 5.69 5.687 10.289 12.046 12.747 19.822.191.604 1.26.93 1.92 1.385v26.531c-.661.927-1.537 1.243-1.95 1.866-3.828 5.777-6.707 12.47-11.484 17.288-48.523 48.95-97.352 97.597-146.387 146.541" data-index="3" style="visibility:visible;opacity:1"/>
  <path fill="#FF8FB8" d="M256.155 256.709c-1.51 1.752-2.916 3.61-4.547 5.24-56.357 56.394-112.739 112.763-169.092 169.16-1.623 1.624-2.971 3.523-4.814 5.502-20.798-20.219-41.23-40.645-61.66-61.073-5.798-5.797-10.866-12.056-13.115-20.182-.162-.585-1.263-.91-1.927-1.356v-26.531c.665-.918 1.703-1.223 1.938-1.837 2.609-6.789 6.436-12.631 11.65-17.825 48.732-48.541 97.34-97.206 146.562-145.848 7.515 6.89 14.468 13.78 21.39 20.699 16.421 16.416 32.849 32.825 49.232 49.28 8.175 8.21 16.258 16.51 24.383 24.77" data-index="4" style="visibility:visible"/>
  <path fill="#7ED8F6" d="M256.43 256.791c-8.4-8.342-16.483-16.644-24.658-24.854-16.383-16.454-32.81-32.863-49.232-49.28a3468 3468 0 0 0-21.1-20.909c11.443-11.996 23.15-23.819 34.91-35.588 32.362-32.39 64.72-64.781 97.136-97.116 10.396-10.37 19.748-22.085 33.841-27.755 8.36-.289 17.048-.289 25.875.006 14.453 5.301 24.066 16.382 34.286 26.687 16.527 16.666 33.074 33.312 49.613 49.966-10.33 10.124-20.69 20.218-30.98 30.38-7.727 7.63-7.688 7.668-15.175.182-13.887-13.888-27.772-27.778-41.667-41.658-1.268-1.266-2.606-2.463-4.454-4.203-6.679 6.725-13.18 13.098-19.36 19.768-.602.649.276 3.62 1.314 4.687 9.4 9.663 18.968 19.163 28.528 28.668 6.724 6.685 13.512 13.305 20.576 20.427.347.913.388 1.352.43 1.791-2.309 2.35-4.599 4.72-6.928 7.049-35.717 35.725-71.44 71.443-107.154 107.172-1.406 1.407-2.72 2.907-4.25 4.667-.542.202-.91.099-1.552-.087" data-index="5" style="visibility:visible;opacity:1"/>
  <path fill="#CFF" d="M451.25 513c-.25-9.64-.249-19.278-.247-29.375.333.801.94 2.058.953 3.322.085 8.37.044 16.744.044 25.584 0 .469-.5.469-.75.469" data-index="9" style="visibility:visible"/>
  <path fill="#4895FF" d="M376.622 138.054c-.35-.503-.392-.942-.427-1.711 4.883-4.765 9.875-9.08 14.61-13.662 6.816-6.596 6.736-6.679 13.44.026 14.234 14.234 28.4 28.537 42.757 42.645 3.037 2.984 3.483 5.051.138 8.083-4.802 4.352-9.376 8.981-13.762 13.755-2.542 2.767-4.185 2.653-6.803-.005-14.943-15.17-30.05-30.178-45.131-45.212-1.397-1.392-3.004-2.575-4.822-3.919" data-index="10" style="visibility:visible"/>
</svg>`;

  const SVG_PICKER = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xml:space="preserve">
  <path fill="#2498D6" d="m256.002 166.833-22.638-21.247 47.51-47.025 21.311 21.563c1.32-1.254 2.648-2.464 3.918-3.733 32.14-32.13 64.258-64.28 96.42-96.39 8.344-8.33 17.986-14.494 29.652-17.139.557-.126.987-.816 1.15-1.552C443.355 1 453.708 1 464.2 1.29c2.006 1.112 3.838 2.031 5.75 2.736 9.506 3.51 18.219 8.25 24.776 15.972-1.986 1.462-3.765 2.708-5.269 4.227-17.102 17.28-34.077 34.687-51.249 51.898-43.532 43.632-87.15 87.18-130.72 130.774-1.642 1.643-3.14 3.43-4.938 5.028-.65-.437-1.07-.751-1.642-1.357a7003 7003 0 0 0-40.915-41.035c-1.119-1.113-2.651-1.81-3.991-2.7" data-index="2" style="opacity:1"/>
  <path fill="#3E62F0" d="M302.782 212.046c1.566-1.72 3.064-3.506 4.706-5.149 43.57-43.595 87.188-87.142 130.72-130.774 17.172-17.21 34.147-34.617 51.25-51.898 1.503-1.519 3.282-2.765 5.59-4.072 1.48 1 2.376 1.879 3.116 2.873 5.382 7.234 10.82 14.4 11.995 23.821.226 1.808 1.858 3.44 2.841 5.153v25.531c-.62.759-1.759 1.007-1.786 1.345-1.07 13.379-8.4 23.58-17.326 32.596-31.885 32.207-64.023 64.163-96.089 96.192-1.29 1.288-2.808 2.347-3.987 3.32l22.502 22.255-47.018 47.024a7070 7070 0 0 1-21.916-22.476c-1.665-1.968-2.844-3.552-4.219-4.945-13.441-13.617-26.915-27.202-40.379-40.796" data-index="3" style="opacity:1"/>
  <path fill="#E63981" d="M82.04 478.142c-8.766 8.877-17.532 17.754-26.803 26.877-.77.407-1.013.6-1.23.822-3.556 2.202-7.112 4.403-10.337 6.881-6.69.278-13.712.278-20.87 0-4.4-3.077-8.662-5.875-12.637-8.854.92-.721 1.594-1.22 2.18-1.806a628846 628846 0 0 0 208.858-208.889c1.146-1.146 1.934-2.65 3.205-4.056.742-.143 1.168-.217 2.059-.223 30.158.136 59.851.204 89.545.272-1.225 1.34-2.399 2.731-3.68 4.014-55.472 55.49-110.874 111.05-166.5 166.385-10.83 10.773-24.062 17.283-39.738 17.378-6.093.036-12.191-.602-18.94-1.173-1.487-.037-2.323.165-3.158.368 0 0-.008-.133-.143.034-.373.427-.61.687-.848.947 0 0-.003-.12-.143.052-.367.438-.593.704-.82.971" data-index="4" style="opacity:1"/>
  <path fill="#FD607A" d="M224.09 289.186c-.955 1.337-1.743 2.84-2.889 3.987A628846 628846 0 0 1 12.344 502.062c-.587.586-1.26 1.085-2.494 1.663-2.767-3.775-4.905-7.606-7.153-11.37-.2-.337-1.114-.247-1.697-.355v-21.531c.663-.91 1.54-1.207 1.956-1.817 2.722-3.997 4.849-8.525 8.1-12.012 7.938-8.515 16.492-16.454 24.519-24.892 1.41-1.482 2.37-4.429 1.998-6.41-3.53-18.79.409-35.793 11.742-51.054 2.838-3.82 6.226-7.27 9.598-10.652 24.789-24.871 49.638-49.682 75.242-74.593 3.93-.067 7.084-.047 10.24-.04q39.848.095 79.695.187" data-index="5" style="opacity:1"/>
  <path fill="#D9E6FB" d="M316.324 289.03c-30.008.068-59.701 0-89.7-.423 1.267-2.278 2.69-4.349 4.434-6.099 21.982-22.05 44.026-44.037 65.99-66.104 1.59-1.597 2.688-3.685 4.014-5.545.419.315.837.63 1.488 1.066a9909 9909 0 0 1 40.611 40.917c1.375 1.393 2.554 2.977 3.923 4.806-10.083 10.638-20.264 20.942-30.76 31.382" data-index="8"/>
  <path fill="#EE4480" d="M84.367 476.085a9.3 9.3 0 0 1 2.37-.4c-.508.22-1.253.283-2.37.4" data-index="9"/>
  <path fill="#EE4480" d="M83.27 477.027c-.03-.168.208-.428.647-.859.008.141-.185.454-.647.859" data-index="10"/>
  <path fill="#EE4480" d="M82.297 478.035c-.03-.16.196-.426.623-.866.011.138-.177.449-.623.866" data-index="11"/>
  <path fill="#EE4480" d="M54.273 505.863c-.049-.245.193-.437.66-.714.003.168-.196.452-.66.714" data-index="12"/>
  <path fill="#EDF2FA" d="M300.908 210.568c-1.172 2.151-2.27 4.239-3.86 5.836-21.964 22.067-44.008 44.054-65.99 66.104-1.744 1.75-3.167 3.821-4.898 6.03-.586.362-1.012.436-1.754.58-26.881.006-53.446-.055-80.012-.118-3.155-.008-6.31-.028-9.929-.105.873-1.517 2.161-3.02 3.556-4.416 39.11-39.13 78.231-78.25 117.666-117.509 1.655.753 3.187 1.45 4.306 2.563a7003 7003 0 0 1 40.915 41.035" data-index="13" style="opacity:1"/>
</svg>`;

  const SVG_BUCKET = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xml:space="preserve">
  <path fill="#E53950" d="M351.053 128.138c37.992-.045 75.999-.737 113.97.124 20.433.464 38.051 12.975 45.388 33.541.477 1.335 1.305 2.545 2.28 3.505.309 56.38.309 113.067.309 170.223-.987 1.507-2.362 2.375-2.902 3.609-7.007 15.993-18.87 25.086-36.464 26.94-14.644 1.544-26.941-2.936-37.157-13.188-8.485-8.515-11.978-19.375-12.375-31.063-.45-13.286-.121-26.598-.057-40.676 4.013-4.993 7.952-9.208 12.403-13.97-1.65-1.355-3.175-2.409-4.465-3.698-34.483-34.444-68.943-68.91-103.396-103.383-1.284-1.284-2.463-2.675-3.514-4.308 7.276-7.485 14.416-14.64 21.449-21.898 1.69-1.744 3.03-3.83 4.53-5.758" data-index="2" style="opacity:1"/>
  <path fill="#4CB8EB" d="M1 266.469c.642-.75 1.767-.923 1.856-1.327 2.86-12.908 10.354-22.954 19.498-32.033 10.037-9.964 20.009-19.994 30.653-30.053 2.166 1.195 3.833 2.308 5.185 3.722 14.52 15.189 31.39 27.175 50.008 36.772 21.336 10.997 44.011 17.794 67.858 21.738 2.199 9.786 7.14 17.722 12.936 25.505-1.324 1.711-2.47 3.138-3.757 4.426q-45.681 45.718-91.4 91.398c-2.232 2.23-4.586 4.336-6.883 6.5-18.62-18.508-37.336-36.92-55.81-55.571-7.179-7.248-14.375-14.612-20.479-22.737-3.664-4.878-5.22-11.335-7.775-17.06-.25-.557-.862-.953-1.598-1.087C1 286.98 1 276.958 1 266.47" data-index="3" style="opacity:1"/>
  <path fill="#0089DE" d="M87.087 393.418c2.164-2.465 4.518-4.571 6.75-6.8q45.719-45.682 91.4-91.399c1.286-1.288 2.433-2.715 4.07-4.32.838-.09 1.251.062 1.788.524 16.618 15.826 41.287 18.065 60.473 5.788 19.18-12.274 27.885-36.376 19.889-57.634-2.628-6.985-7.658-13.066-11.282-19.704a556 556 0 0 0 10.68-10.261c10.803-10.629 21.595-21.269 32.69-31.751 37.373 37.178 74.447 74.204 111.522 111.23-1.108 1.224-2.167 2.499-3.333 3.665-57.15 57.165-114.262 114.369-171.519 171.426-8.682 8.652-19.51 13.004-31.74 15.013-13.073 2.148-25.135-.5-36.792-5.494-5.137-2.2-10.004-5.781-14.016-9.728-23.642-23.256-46.995-46.805-70.58-70.555" data-index="4" style="opacity:1"/>
  <path fill="#CEF1FA" d="M415.38 288.967c-37.388-36.902-74.462-73.928-111.92-111.364-.54-.735-.698-1.06-.495-1.478 7.26-6.79 14.162-13.487 21.28-20.146.217.038.652.106.652.106 1.227 1.342 2.406 2.733 3.69 4.017 34.453 34.473 68.913 68.94 103.396 103.383 1.29 1.29 2.816 2.343 4.465 3.698-4.45 4.762-8.39 8.977-12.47 13.506a187 187 0 0 1-8.599 8.278" data-index="5" style="opacity:1"/>
  <path fill="#0089DE" d="M175.89 264.948c-23.679-3.604-46.354-10.4-67.69-21.398-18.619-9.597-35.488-21.583-50.008-36.772-1.352-1.414-3.02-2.527-4.877-3.868-5.031-7.506-9.997-14.767-14.354-22.378-5.662-9.892-8.008-20.685-9.16-32.1-2.22-22.003 4.307-41.448 16.615-58.846 9.827-13.891 22.904-24.65 38.092-32.89 17.5-9.496 35.96-16.442 55.46-19.38 16.228-2.446 32.84-2.425 49.293-3.232 4.238-.207 8.901-.353 12.684 1.172 4.034 1.626 7.255 5.265 10.691 8.526a630 630 0 0 1-21.39 22.167c-.978.039-1.63.107-2.71.12-7.436-.06-14.489-.558-21.446.046-10.076.876-20.23 1.88-30.09 4.02-22.867 4.963-44.04 13.823-60.098 31.62-13.227 14.658-19.893 31.722-14.808 51.726 2.494 9.808 6.5 19.032 13.805 26.832 1.701 2.622 3.108 5.097 4.993 7.127 15.84 17.053 35.177 29.066 56.884 36.732 13.528 4.777 27.858 7.285 41.722 11.2-4.116 9.776-4.768 19.567-3.608 29.576" data-index="6" style="opacity:1"/>
  <path fill="#E6F8FC" d="M191.573 65.978c6.975-7.232 13.949-14.464 21.198-21.893 11.369 10.782 22.498 21.724 33.547 32.747 16.94 16.903 33.826 33.86 51.05 51.388 9.097 9.636 17.879 18.68 26.661 27.722-6.902 6.696-13.803 13.393-21.329 19.999-35.726-35.176-70.824-70.265-105.943-105.334-1.637-1.634-3.452-3.09-5.184-4.629" data-index="7" style="opacity:1"/>
  <path fill="#FF6C6D" d="M324.246 155.98a1841 1841 0 0 1-26.7-27.502c17.43-.377 34.996-.418 53.034-.4-1.028 1.988-2.368 4.074-4.058 5.818-7.033 7.258-14.173 14.413-21.449 21.898-.176.291-.61.223-.827.185" data-index="8"/>
  <path fill="#E5F8FC" d="M176.058 265.288c-1.328-10.349-.676-20.14 3.64-30.153 1.114-2.081 1.876-3.563 2.73-4.99 16.334-27.33 54.923-32.404 76.469-9.743-1.415 1.987-2.621 3.78-4.119 5.282-19.924 19.985-39.908 39.912-59.81 59.92-1.581 1.589-2.676 3.662-3.997 5.51-.413-.153-.826-.306-1.552-.564-6.221-7.54-11.162-15.476-13.361-25.262" data-index="9"/>
  <path fill="#4CB8EB" d="M258.969 220.073c-21.618-22.332-60.207-17.258-76.541 10.072-.854 1.427-1.616 2.909-2.623 4.602-14.17-3.29-28.5-5.798-42.03-10.575-21.706-7.666-41.043-19.679-56.883-36.732-1.885-2.03-3.292-4.505-4.84-7.436 36.477-37.062 72.876-73.457 109.264-109.865 1.277-1.278 2.434-2.674 3.647-4.015a32 32 0 0 1 2.284-.175c2.058 1.568 3.873 3.024 5.51 4.658 35.119 35.07 70.217 70.158 105.584 105.427.421.51.578.834.82 1.417-10.71 10.892-21.503 21.532-32.306 32.16-3.442 3.388-6.914 6.746-10.904 10.286a3.8 3.8 0 0 1-.982.176" data-index="10" style="opacity:1"/>
  <path fill="#CDF1FB" d="M258.897 220.402c.072-.329.522-.336.746-.36 4.156 6.469 9.186 12.55 11.814 19.535 7.996 21.258-.71 45.36-19.89 57.634-19.185 12.277-43.854 10.038-60.472-5.788 1.197-2.157 2.292-4.23 3.873-5.82 19.902-20.007 39.886-39.934 59.81-59.92 1.498-1.502 2.704-3.294 4.119-5.28" data-index="11"/>
</svg>`;

  const SVG_CROSSHAIR = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><g fill="#fff" stroke="#000" stroke-width="1.5" stroke-linejoin="round" stroke-linecap="round"><circle cx="12" cy="12" r="2"/><path d="M12 2v20M2 12h20"/></g></svg>`;

  const SVG_RECT = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xml:space="preserve">
  <path fill="#6D4550" d="M1 333c0-50.354 0-100.708.469-151.531 20.113-.489 39.758-.509 59.508-.067.13 50.038.154 99.614.164 149.19 0 .822-.176 1.646-.73 2.446-20.11-.027-39.76-.033-59.411-.038" data-index="2" style="opacity:1;visibility:visible;fill:#5b2a39"/>
  <path fill="#5B2A39" d="M513 181c0 50.354 0 100.708-.469 151.542-20.101.487-39.734.495-59.442.038-.088-37.22-.119-73.973-.104-110.727.005-13.633.116-27.266.638-40.893 20.098.017 39.737.028 59.377.04" data-index="3" style="opacity:1"/>
  <path fill="#6D4550" d="M1 61.469C31.068 61 61.136 61 92.012 61c0 19.892 0 39.43-.36 59.602-10.255.635-20.15.635-30.77.635 0 10.957 0 20.889-.462 30.799-20.114-.026-39.767-.031-59.42-.036z" data-index="4" style="opacity:1;visibility:visible;fill:#5b2a39"/>
  <path fill="#6D4550" d="M92.054 393.11V453H1.469c-.469-30.02-.469-60.042 0-90.53 20.116-.488 39.764-.508 59.52-.066.108 10.188.108 19.914.108 30.049 3.557 0 6.362-.06 9.163.012 7.265.184 14.53.426 21.794.645" data-index="5" style="opacity:1;visibility:visible;fill:#5b2a39"/>
  <path fill="#5B2A39" d="M422.977 61.125c29.696-.045 59.39-.09 89.554-.13.469 30.026.469 60.047 0 90.545-20.102.488-39.736.498-59.445.042-.076-10.336-.076-20.205-.076-30.663-10.51 0-20.257 0-30.006-.463z" data-index="6" style="opacity:1"/>
  <path fill="#5B2A39" d="M513 452.531c-29.695.46-59.391.45-89.546-.066a1283 1283 0 0 1 .011-59.482c10.014-.098 19.568-.098 29.7-.098 0-10.775 0-20.853.458-30.926 20.098.017 39.737.03 59.377.041z" data-index="7" style="opacity:1"/>
  <path fill="#EDE5F1" d="M453.09 332.58c.024 9.795-.025 19.123 0 28.913.074 10.54.074 20.617.074 31.392-10.13 0-19.685 0-29.968.039-.903.095-1.078.152-1.252.208-9.324-.04-18.647-.079-28.893-.168-45.964-.024-91.006.003-136.087-.137-.039-.168-.076-.51-.044-.997.047-72.231.073-143.975.075-215.718.001-18.143-.07-36.286-.09-54.6.02-.171.097-.506.562-.445 44.184.069 87.903.08 131.622.072 1.32 0 2.64-.181 3.96-.278 9.324.042 18.648.084 28.695.15.903-.013 1.083-.052 1.262-.092h30.004c0 10.458 0 20.327.076 30.663.027 9.794-.022 19.122.004 28.911.011 14.094-.1 27.727-.105 41.36-.015 36.754.016 73.507.104 110.727" data-index="12" style="opacity:1;visibility:visible"/>
  <path fill="#FFF4F4" d="M256.887 121.683c.038 18.143.11 36.286.108 54.43-.002 71.742-.028 143.486-.534 215.774-41.872.553-83.255.545-124.638.596-3.626.004-7.25.4-10.875.613-9.323-.03-18.646-.059-28.432-.037-7.727-.168-14.99-.41-22.256-.594-2.801-.072-5.606-.012-9.163-.012 0-10.135 0-19.861-.108-30.05-.071-9.78-.035-19.1-.058-28.88.034-1.285.21-2.109.21-2.932-.01-49.575-.035-99.151-.164-149.19-.064-9.78-.023-19.1-.039-28.882-.057-10.393-.057-20.325-.057-31.282 10.62 0 20.516 0 30.79-.174 9.704-.139 19.027-.104 29.219.07 4.854.231 8.839.395 12.824.4 41.058.065 82.116.104 123.173.15" data-index="13" style="opacity:1;visibility:visible;fill:#ede5f1"/>
  <path fill="#6D4550" d="M256.906 121.512c-41.076.125-82.134.086-123.192.022-3.985-.006-7.97-.17-12.36-.445-.406-19.936-.406-39.687-.406-60.051 45.396 0 90.239 0 135.56.506.484 20.158.49 39.81.494 59.462 0 0-.078.335-.096.506" data-index="14" style="opacity:1;visibility:visible;fill:#5b2a39"/>
  <path fill="#5B2A39" d="M257.467 121.067c-.47-19.713-.475-39.365-.495-59.473 44.562-.495 89.14-.534 133.716-.56.485 0 .97.168 2.347.422 0 19.404 0 38.945.008 58.945-1.313.557-2.634.738-3.954.738-43.719.007-87.438-.003-131.622-.072" data-index="15" style="opacity:1"/>
  <path fill="#623742" d="M423.004 120.456c-.177.503-.357.542-.798.496-.243-18.023-.233-35.96-.193-53.898.005-1.815.195-3.629.631-5.686.342 19.38.35 39.002.36 59.088" data-index="16" style="opacity:1"/>
  <path fill="#6D4550" d="M120.966 393.558c3.607-.676 7.231-1.07 10.857-1.075 41.383-.051 82.766-.043 124.607-.108.458-.058.495.284.533.92.023 20.281.009 39.925-.006 59.569-44.572.033-89.144.068-133.716.09-.48 0-.962-.17-2.256-.414 0-19.428 0-38.974-.019-58.982" data-index="17" style="opacity:1;visibility:visible;fill:#5b2a39"/>
  <path fill="#5B2A39" d="M257.426 452.916c-.454-19.696-.44-39.34-.424-59.453 45.043-.496 90.085-.523 135.587-.437.46 19.857.46 39.601.46 59.943-45.457 0-90.305 0-135.623-.053" data-index="18" style="opacity:1"/>
  <path fill="#623742" d="M421.963 393.592c.155-.516.33-.573.774-.57.265 19.685.26 39.312.249 59.396-.334-1.241-.936-2.939-.943-4.638-.075-17.91-.054-35.819-.08-54.188" data-index="19"/>
</svg>`;

  const SVG_CIRC = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xml:space="preserve">
  <path fill="#A6CFE7" d="M1 225.469c.665-1.094 1.812-1.647 1.917-2.355.831-5.603 1.463-11.236 2.225-17.418 6.732 1.223 13.063 2.351 19.383 3.534 2.854.534 5.788.904 8.483 1.898 1.202.444 2.9 2.48 2.685 3.394-4.209 17.798-4.21 35.894-3.549 53.95.375 10.222 2.268 20.384 3.293 30.592.124 1.234-.695 3.573-1.433 3.73-9.015 1.914-18.095 3.523-27.164 5.179-.44.08-.933-.138-1.804-.284-.687-5.766-1.341-11.563-2.113-17.345-.095-.715-.812-1.346-1.582-1.68C1 267.979 1 246.958 1 225.469" data-index="1"/>
  <path fill="#8DB3CF" d="M513 288.531c-.656.945-1.81 1.348-1.891 1.907-.822 5.64-1.467 11.306-2.256 17.727-4.899-.798-9.625-1.482-14.316-2.358-4.45-.832-8.913-1.681-13.256-2.924-1.27-.364-3.238-2.353-3.047-3.167 3.866-16.484 4.462-33.233 3.636-49.988-.577-11.72-2.42-23.376-3.53-35.076-.108-1.142.777-3.306 1.516-3.457 9.207-1.889 18.473-3.496 27.728-5.153.282-.05.608.145 1.195.299.743 5.692 1.466 11.492 2.3 17.275.104.72.802 1.355 1.573 1.706.348 20.699.348 41.72.348 63.21" data-index="2"/>
  <path fill="#8DB3CF" d="M256.975 482.169c14.424.087 28.752-.768 42.877-4 .852-.195 2.808.961 2.967 1.748 1.857 9.194 3.472 18.438 5.126 27.673.05.276-.167.6-.347 1.19-5.664.741-11.45 1.465-17.22 2.3-.718.104-1.35.801-1.7 1.572a399 399 0 0 1-31.21-.12c-.476-10.434-.485-20.399-.493-30.363" data-index="3" style="opacity:1"/>
  <path fill="#A6CFE7" d="M256.513 482.095c.47 10.038.479 20.003.487 30.436-10.354.469-20.708.469-31.531.469-.762-.646-.981-1.806-1.36-1.86-5.804-.841-11.628-1.538-18.254-2.369.746-4.695 1.399-9.409 2.263-14.084.851-4.604 1.727-9.223 3.016-13.713.334-1.166 2.455-2.847 3.418-2.65 13.705 2.813 27.513 4.178 41.961 3.77" data-index="4" style="opacity:1"/>
  <path fill="#A6CFE7" d="M256.975 30.835c-1.372.388-2.753 1.139-4.116 1.108a158 158 0 0 0-38.409 3.854c-.949.214-3.097-1.02-3.28-1.882-1.89-8.846-3.496-17.753-5.15-26.649-.111-.601.038-1.25.08-2.218 5.998-.71 11.787-1.359 17.56-2.125.713-.095 1.343-.812 1.676-1.582a402 402 0 0 1 31.195.128c.46 10.101.452 19.734.444 29.366" data-index="5"/>
  <path fill="#8DB3CF" d="M257.361 31.029c-.378-9.826-.37-19.459-.361-29.56C267.354 1 277.708 1 288.531 1c.941.656 1.341 1.81 1.897 1.89 5.628.816 11.282 1.457 17.738 2.246-.781 4.836-1.457 9.546-2.321 14.223-.85 4.603-1.733 9.213-2.96 13.723-.31 1.144-2.203 2.892-3 2.713-13.32-2.981-26.78-4.184-40.406-3.846-.57.014-1.154-.473-2.118-.92" data-index="6"/>
  <path fill="#435D7A" d="M256.93 449.853c-11.335-.994-22.772-1.343-33.982-3.122-20.315-3.224-39.487-10.267-57.562-20.051-21.144-11.445-39.518-26.328-55.109-44.741-10.961-12.946-20.182-26.908-27.374-42.245-8.729-18.614-15.032-37.943-16.89-58.519-.876-9.707-2.207-19.483-1.842-29.172.835-22.168 4.919-43.774 12.981-64.615 6.3-16.285 14.201-31.811 25.05-45.263 10.343-12.825 22.075-24.757 34.456-35.65 14.181-12.476 30.86-21.535 48.485-28.468 15.197-5.977 30.838-10.515 47.207-12.004 7.887-.718 15.786-1.312 24.15-1.452.48 84.798.5 169.086.496 253.374-.002 43.976-.043 87.952-.067 131.928" data-index="7"/>
  <path fill="#2D3E53" d="M257.386 449.9c-.433-44.023-.392-88-.39-131.975.004-84.288-.015-168.576-.046-253.321 22.162-.25 43.776 3.242 64.698 10.738 21.902 7.847 41.702 19.26 59.54 34.252 22.497 18.908 39.767 41.74 51.739 68.468 7.805 17.427 13.473 35.59 15.087 54.775.804 9.56 2.152 19.173 1.821 28.713-.77 22.26-4.828 43.953-12.93 64.868-11.18 28.863-28.244 53.676-51.205 74.224-26.084 23.342-56.398 38.846-90.945 45.193-12.146 2.232-24.599 2.79-37.369 4.065" data-index="8"/>
  <path fill="#A6CFE7" d="M118.24 472.742c-10.673-7.73-21.08-15.201-32.146-23.144l21.446-24.076c23.094 20.014 48.295 35.397 78.042 45.205-1.465 4.584-2.982 9.412-4.552 14.223-1.296 3.973-2.923 7.86-3.901 11.907-.763 3.155-1.736 3.376-4.778 2.35-19.085-6.443-36.977-15.253-54.111-26.465" data-index="9" style="opacity:1"/>
  <path fill="#8DB3CF" d="M438.237 417.736c-4.315-3.86-8.38-7.466-11.893-10.582 8.752-12.711 17.963-24.559 25.46-37.407 7.465-12.792 13.209-26.587 20.219-40.995 3.452 1.127 8.152 2.648 12.844 4.195 3.995 1.318 7.916 2.924 11.988 3.92 3.154.77 3.35 1.78 2.347 4.807-7.46 22.493-18.475 43.152-31.986 62.498-5.495 7.869-11.67 15.263-17.854 23.287a2590 2590 0 0 1-11.125-9.723" data-index="10" style="opacity:1"/>
  <path fill="#8DB3CF" d="M389.253 439.253a3288 3288 0 0 1 17.341-13.46l20.773 23.195c-26.327 22.874-55.392 40.306-89.26 51.466l-9.881-29.69c22.697-7.342 42.4-18.009 61.027-31.511" data-index="11" style="opacity:1"/>
  <path fill="#8DB3CF" d="M464.768 106.271c8.406 14.077 16.96 27.673 24.546 41.79 4.18 7.776 6.817 16.396 9.918 24.722.411 1.103-.202 3.692-.919 3.943-8.392 2.939-16.89 5.579-25.378 8.237-.739.231-1.613.03-2.369.03-9.639-28.814-24.554-54.258-45.061-77.382l23.681-21.116c5.292 6.738 10.309 13.126 15.582 19.776" data-index="12"/>
  <path fill="#8DB3CF" d="M335.035 22.105c3.5-9.072 3.37-8.73 12.54-5.264 20.755 7.841 40.17 18.106 58.102 31.137 7.24 5.26 14.237 10.854 21.877 16.704-7.127 8.042-14.04 15.841-20.445 23.07-11.17-7.862-21.308-16.147-32.51-22.583-13.15-7.556-27.118-13.733-40.96-20.007-3.93-1.782-5.578-3.08-3.744-7.468 2.054-4.914 3.433-10.111 5.14-15.589" data-index="13"/>
  <path fill="#A6CFE7" d="M23.24 363.603c-3.341-8.431-6.488-16.522-9.954-25.432l29.89-9.952c9.881 29.574 24.807 54.94 45.25 78.198L65.043 427.33c-17.058-19.288-30.641-40.473-41.803-63.727" data-index="14"/>
  <path fill="#A6CFE7" d="M112.779 83.72a429 429 0 0 0-4.407 5.63L86.67 65.03c26.105-22.852 55.202-40.134 89.079-51.478L185.85 43.24c-27.698 8.897-51.158 22.943-73.071 40.48" data-index="15"/>
  <path fill="#A6CFE7" d="M23.89 179.025c-3.574-1.128-6.743-2.231-10.225-3.444 10.928-33.367 28.398-62.48 51.297-88.925L88.448 107.5c-20.123 22.945-35.192 48.327-45.298 78.273-6.065-2.162-12.46-4.443-19.26-6.749" data-index="16"/>
</svg>`;

  const CURSORS = {
    cursor: 'default', 
    pencil: () => PENCIL_CURSOR_URI,
    brush:  makeCursor(SVG_BRUSH,   6, 40),
    eraser: makeCursor(SVG_ERASER, 10, 512),
    picker: makeCursor(SVG_PICKER,  1, 512),
    fill:   makeCursor(SVG_BUCKET,  512, 16),
    line:   makeCursor(SVG_CROSSHAIR, 12, 12),
    rect:   makeCursor(SVG_RECT,    0, 0),
    rectf:  makeCursor(SVG_RECT,    0, 0),
    circ:   makeCursor(SVG_CIRC,    0, 0),
    circf:  makeCursor(SVG_CIRC,    0, 0),
    default: 'crosshair'
  };

  function applyCursor(){
    if (state.tool === 'cursor') { 
      paint.style.cursor = 'grab';   // idle
      return; 
    }
    if (!state.customCursors){
      paint.style.cursor = 'crosshair';
      return;
    }
    const entry = CURSORS[state.tool] ?? CURSORS.default;
    paint.style.cursor = (typeof entry === 'function') ? entry() : entry;
  }


  // ====== Translations ======
  window.applyTranslations?.(document);

  // ====== Canvas helpers ======
  function isCanvasEmpty(c){
    if (!c || !c.width || !c.height) return true;
    const ctx = c.getContext('2d', { willReadFrequently: true });
    const data = ctx.getImageData(0, 0, c.width, c.height).data;
    for (let i = 3; i < data.length; i += 4){
      if (data[i] !== 0) return false; // found a non-transparent pixel
    }
    return true;
  }

  // ====== Canvas sizing ======
  function resizeLogical(){
    // keep current bitmap
    const tmp = document.createElement('canvas');
    tmp.width = paint.width; tmp.height = paint.height;
    tmp.getContext('2d').drawImage(paint,0,0);

    // true image pixels
    paint.width = gridN; paint.height = gridN;
    pctx.imageSmoothingEnabled = false;
    pctx.clearRect(0,0,gridN,gridN);
    if (tmp.width && tmp.height) pctx.drawImage(tmp,0,0,gridN,gridN);

    grid.width  = gridN; grid.height = gridN;
    // stage is exactly the image pixel size in CSS pixels (pre-zoom)
    stage.style.width  = gridN + 'px';
    stage.style.height = gridN + 'px';

    drawGrid();
    applyZoom();
  }

  // nothing to do here anymore; width/height are fixed to gridN px
  function applyZoom(){
    stage.style.transform = `scale(${zoom})`;
    zoomLbl.textContent = `${zoom}×`;
  }

  (function enhanceViewport() {
    const vp = document.getElementById('viewport');
    if (!vp) return;

  // ---- Drag-to-pan ----
  let panDown = false, sx = 0, sy = 0, sl = 0, st = 0;

  function setPanIdleCursor(){
    // show grab only when Cursor tool is active
    vp.style.cursor = (state.tool === 'cursor') ? 'grab' : '';
    // canvas cursor is handled by applyCursor(); leave it alone here
  }

  // keep cursor updated whenever tool changes
  const __origSetToolForPan = setTool;
  setTool = function(t){
    __origSetToolForPan(t);
    // abort any ongoing pan when leaving Cursor
    if (t !== 'cursor' && panDown){
      panDown = false;
    }
    setPanIdleCursor();
  };

  vp.addEventListener('mousedown', e => {
    if (e.button !== 0) return;          // only left button
    if (state.tool !== 'cursor') return; // only with cursor tool
    panDown = true;
    sx = e.clientX; sy = e.clientY;
    sl = vp.scrollLeft; st = vp.scrollTop;

    // change cursor on the canvas, not the viewport
    paint.style.cursor = 'grabbing';

    e.preventDefault();
  });

  window.addEventListener('mouseup', () => {
    if (!panDown) return;
    panDown = false;

    // back to idle grab
    if (state.tool === 'cursor') {
      paint.style.cursor = 'grab';
    }
  });

  window.addEventListener('mousemove', e => {
    if (!panDown) return;
    vp.scrollLeft = sl - (e.clientX - sx);
    vp.scrollTop  = st - (e.clientY - sy);
  });

  window.addEventListener('mouseup', () => {
    if (!panDown) return;
    panDown = false;
    setPanIdleCursor();
  });

  window.addEventListener('blur', () => {
    if (!panDown) return;
    panDown = false;
    setPanIdleCursor();
  });

  // initialize cursor appearance for current tool
  setPanIdleCursor();


  // ---- Ctrl + wheel zoom ----
  vp.addEventListener('wheel', e => {
    if (!(e.ctrlKey || e.metaKey)) return;
    e.preventDefault();

    const delta = Math.sign(e.deltaY);
    let newZoom = zoom - delta; // scroll up = zoom in
    newZoom = clamp(newZoom, parseInt(zoomSel.min,10), parseInt(zoomSel.max,10));

    if (newZoom === zoom) return;
    zoom = newZoom;
    zoomSel.value = String(zoom);
    applyZoom();
    if (showGrid) drawGrid();

    // keep cursor position stable during zoom
    const rect = vp.getBoundingClientRect();
    const cx = e.clientX - rect.left + vp.scrollLeft;
    const cy = e.clientY - rect.top  + vp.scrollTop;
    const ratio = zoom / (zoom - (delta));
    vp.scrollLeft = cx * ratio - (e.clientX - rect.left);
    vp.scrollTop  = cy * ratio - (e.clientY - rect.top);
  }, { passive: false });
})();


  function syncGridButton(){
    if (!gridBtn) return;
    const t = (k, f) => (window.translations?.[window.getCurrentLang?.()||'en']?.[k] ?? f);
    gridBtn.textContent = showGrid ? t('hideGrid','Hide grid') : t('showGrid','Show grid');
    gridBtn.setAttribute('aria-pressed', String(showGrid));
    gridBtn.classList.toggle('active', showGrid);
  }

  function buildGridPattern(ctx, tint = [30,40,60], a1 = 18, a2 = 36){
    const [R,G,B] = tint;

    const tile = document.createElement('canvas');
    tile.width = 2; tile.height = 2;
    const tctx = tile.getContext('2d', {alpha:true});

    const img = tctx.createImageData(2,2);
    const d = img.data;

    const set = (i,a)=>{ d[i]=R; d[i+1]=G; d[i+2]=B; d[i+3]=a; };
    set(0, a2);  // top-left
    set(4, a1);  // top-right
    set(8, a1);  // bottom-left
    set(12,a2);  // bottom-right
    tctx.putImageData(img,0,0);

    return ctx.createPattern(tile, 'repeat');
  }

  function drawGrid(){
    const N = gridN;

    // 1 canvas px == 1 drawable pixel
    grid.width  = N;
    grid.height = N;

    grid.style.display = showGrid ? 'block' : 'none';
    if (!showGrid) return;

    gctx.imageSmoothingEnabled = false;
    grid.style.imageRendering = 'pixelated';

    // canvas resize resets context state, so (re)set the pattern each call
    if (!_gridPattern) _gridPattern = buildGridPattern(gctx);

    gctx.clearRect(0,0,N,N);
    gctx.fillStyle = _gridPattern;
    gctx.fillRect(0,0,N,N);
  }


  // ====== Undo/Redo ======
  function pushUndo(){
    undoStack.push(pctx.getImageData(0,0,gridN,gridN));
    if (undoStack.length>MAX_STACK) undoStack.shift();
    redoStack.length = 0;
  }
  function doUndo(){
    if (!undoStack.length) return;
    const cur = pctx.getImageData(0,0,gridN,gridN);
    redoStack.push(cur);
    pctx.putImageData(undoStack.pop(),0,0);
  }
  function doRedo(){
    if (!redoStack.length) return;
    const cur = pctx.getImageData(0,0,gridN,gridN);
    undoStack.push(cur);
    pctx.putImageData(redoStack.pop(),0,0);
  }

  // ====== Tools ======
  function setTool(t){
    state.tool = t;
    state.quickErase = false;
    $$('.toolbtn').forEach(b=>b.setAttribute('aria-pressed','false'));
    ({
      cursor: toolCursor,
      pencil: toolPencil, brush:  toolBrush, eraser: toolEraser, picker: toolPicker, fill: toolFill,
      line: toolLine, rect: toolRect, rectf: toolRectF, circ: toolCirc, circf: toolCircF
    }[t] || toolPencil).setAttribute('aria-pressed','true');
     applyCursor();
  }
  toolCursor.onclick = () => setTool('cursor');
  toolPencil.onclick=()=>setTool('pencil');
  toolEraser.onclick=()=>setTool('eraser');
  toolPicker.onclick=()=>setTool('picker');
  toolFill.onclick  =()=>setTool('fill');
  toolLine.onclick  =()=>setTool('line');
  toolRect.onclick  =()=>setTool('rect');
  toolRectF.onclick =()=>setTool('rectf');
  toolCirc.onclick  =()=>setTool('circ');
  toolCircF.onclick =()=>setTool('circf');
  toolUndo.onclick  =doUndo;
  toolRedo.onclick  =doRedo;

  window.addEventListener('keydown', (e) => {
    // Ignore shortcuts while typing
    const a = document.activeElement;
    const typing = a &&
      (a.tagName === 'INPUT' || a.tagName === 'TEXTAREA' || a.isContentEditable);
    if (typing) return;

    if (e.ctrlKey && e.key.toLowerCase() === 'z'){ e.preventDefault(); doUndo(); }
    if (e.ctrlKey && e.key.toLowerCase() === 'y'){ e.preventDefault(); doRedo(); }

    const k = e.key.toLowerCase();
    if (k === 'p') setTool('pencil');
    else if (k === 'v') setTool('cursor');
    else if (k === 'h') setTool('brush');
    else if (k === 'e') setTool('eraser');
    else if (k === 'i') setTool('picker');
    else if (k === 'b') setTool('fill');
    else if (k === 'l') setTool('line');
    else if (k === 'r') setTool(e.shiftKey ? 'rectf' : 'rect');
    else if (k === 'o') setTool(e.shiftKey ? 'circf' : 'circ');
    else if (k === 'g') gridBtn.click();
  });

// ====== Color / palette ======
function setColor(hex, name){
  state.color = hex;

  // prefer a  name; fall back to hex
  const label = name || COLOR_NAME_BY_HEX[hex] || hex;
}

const STUDIO_FREE = {
  "0,0,0": "Black",
  "60,60,60": "Dark Gray",
  "120,120,120": "Gray",
  "210,210,210": "Light Gray",
  "255,255,255": "White",
  "96,0,24": "Deep Red",
  "237,28,36": "Red",
  "255,127,39": "Orange",
  "246,170,9": "Gold",
  "249,221,59": "Yellow",
  "255,250,188": "Light Yellow",
  "14,185,104": "Dark Green",
  "19,230,123": "Green",
  "135,255,94": "Light Green",
  "12,129,110": "Dark Teal",
  "16,174,166": "Teal",
  "19,225,190": "Light Teal",
  "96,247,242": "Cyan",
  "40,80,158": "Dark Blue",
  "64,147,228": "Blue",
  "107,80,246": "Indigo",
  "153,177,251": "Light Indigo",
  "120,12,153": "Dark Purple",
  "170,56,185": "Purple",
  "224,159,249": "Light Purple",
  "203,0,122": "Dark Pink",
  "236,31,128": "Pink",
  "243,141,169": "Light Pink",
  "104,70,52": "Dark Brown",
  "149,104,42": "Brown",
  "248,178,119": "Beige"
};

const STUDIO_PAID = {
  "170,170,170": "Medium Gray",
  "165,14,30": "Dark Red",
  "250,128,114": "Light Red",
  "228,92,26": "Dark Orange",
  "156,132,49": "Dark Goldenrod",
  "197,173,49": "Goldenrod",
  "232,212,95": "Light Goldenrod",
  "74,107,58": "Dark Olive",
  "90,148,74": "Olive",
  "132,197,115": "Light Olive",
  "15,121,159": "Dark Cyan",
  "187,250,242": "Light Cyan",
  "125,199,255": "Light Blue",
  "77,49,184": "Dark Indigo",
  "74,66,132": "Dark Slate Blue",
  "122,113,196": "Slate Blue",
  "181,174,241": "Light Slate Blue",
  "155,82,73": "Dark Peach",
  "209,128,120": "Peach",
  "250,182,164": "Light Peach",
  "219,164,99": "Light Brown",
  "123,99,82": "Dark Tan",
  "156,132,107": "Tan",
  "214,181,148": "Light Tan",
  "209,128,81": "Dark Beige",
  "255,197,165": "Light Beige",
  "109,100,63": "Dark Stone",
  "148,140,107": "Stone",
  "205,197,158": "Light Stone",
  "51,57,65": "Dark Slate",
  "109,117,141": "Slate",
  "179,185,209": "Light Slate"
};

/* Build hex -> name lookup */
const COLOR_NAME_BY_HEX = (() => {
  const toHex = (rgb) => {
    const [r,g,b] = rgb.split(',').map(Number);
    const h = n => n.toString(16).padStart(2,'0');
    return `#${h(r)}${h(g)}${h(b)}`;
  };
  const map = {};
  Object.entries(STUDIO_FREE).forEach(([rgb,name]) => map[toHex(rgb)] = name);
  Object.entries(STUDIO_PAID).forEach(([rgb,name]) => map[toHex(rgb)] = name);
  return map;
})();

function hexFromRGB(r,g,b){
  const h = n => n.toString(16).padStart(2,'0');
  return `#${h(r)}${h(g)}${h(b)}`;
}

function rgbKeyToHex(key){
  const [r,g,b] = key.split(',').map(Number);
  const h = n => n.toString(16).padStart(2,'0');
  return `#${h(r)}${h(g)}${h(b)}`;
}

function pressSwatchByHex(hex){
  const hx = hex.toLowerCase();
  document.querySelectorAll('.palette .swatch[aria-pressed="true"]')
    .forEach(el => el.setAttribute('aria-pressed','false'));
  const btn = document.querySelector(`.palette .swatch[data-hex="${hx}"]`);
  if (btn) btn.setAttribute('aria-pressed','true');
}

function pickNearestAndSelect(r,g,b){
  const [nr,ng,nb] = nearestInPalette(r,g,b);
  const hex = hexFromRGB(nr,ng,nb);
  const name = COLOR_NAME_BY_HEX[hex] || hex;
  setColor(hex, name);
  pressSwatchByHex(hex);
}

function buildPalette(){
  const freeRoot = document.getElementById('palette-free');
  const paidRoot = document.getElementById('palette-paid');
  let firstBtn = null;

  const render = (root, dict) => {
    if (!root) return;
    root.innerHTML = '';
    Object.entries(dict).forEach(([rgb, name]) => {
      const hex = rgbKeyToHex(rgb);
      const btn = document.createElement('button');
      btn.className = 'swatch';
      btn.style.background = hex;
      btn.dataset.hex = hex.toLowerCase();
      btn.title = name;
      btn.onclick = () => {
        setColor(hex, name);
        document.querySelectorAll('.palette .swatch[aria-pressed="true"]')
          .forEach(el => el.setAttribute('aria-pressed','false'));
        btn.setAttribute('aria-pressed','true');
      };
      root.appendChild(btn);

      if (!firstBtn && name === "Black") firstBtn = btn;
    });
  };

  render(freeRoot, STUDIO_FREE);
  render(paidRoot, STUDIO_PAID);

  // Default to Black
  if (firstBtn){
    firstBtn.click();
  }
}

// --- Quantize to Studio palette

// Build array of [r,g,b] from Studio palettes
function getStudioPalette() {
  const toArr = (obj) => Object.keys(obj).map(k => k.split(',').map(Number));
  return [...toArr(STUDIO_FREE), ...toArr(STUDIO_PAID)];
}

// Compuphase-weighted nearest color (same as main.js corMaisProxima)
function nearestInPalette(r, g, b, palette = getStudioPalette()) {
  let best = palette[0], bestD = Infinity;
  for (let i = 0; i < palette.length; i++) {
    const [pr, pg, pb] = palette[i];
    const rmean = (pr + r) / 2;
    const rdiff = pr - r, gdiff = pg - g, bdiff = pb - b;
    const x = (512 + rmean) * rdiff * rdiff >> 8;
    const y = 4 * gdiff * gdiff;
    const z = (767 - rmean) * bdiff * bdiff >> 8;
    const dist = Math.sqrt(x + y + z);
    if (dist < bestD) { bestD = dist; best = palette[i]; }
  }
  return best;
}

// Rewrite current paint canvas pixels to palette colors only
function clampPaintToPalette() {
  const w = gridN, h = gridN;
  const img = pctx.getImageData(0, 0, w, h);
  const d = img.data;
  for (let i = 0; i < d.length; i += 4) {
    if (d[i+3] === 0) continue; // keep transparent pixels
    const [nr, ng, nb] = nearestInPalette(d[i], d[i+1], d[i+2]);
    d[i] = nr; d[i+1] = ng; d[i+2] = nb; d[i+3] = 255;
  }
  pctx.putImageData(img, 0, 0);
}

// Common draw+quantize routine for imported or generated images
function drawImportedFitQuantized(img) {
  pctx.imageSmoothingEnabled = false;
  pctx.clearRect(0, 0, gridN, gridN);
  const W = img.width, H = img.height;
  const s = Math.min(gridN / W, gridN / H);
  const w = Math.max(1, Math.floor(W * s));
  const h = Math.max(1, Math.floor(H * s));
  const x = Math.floor((gridN - w) / 2), y = Math.floor((gridN - h) / 2);
  pctx.drawImage(img, 0, 0, W, H, x, y, w, h);
  clampPaintToPalette();
}

  // ====== Geometry helpers ======
  function cellFromEvent(e){
    const r = paint.getBoundingClientRect();
    const x = clamp(Math.floor((e.clientX-r.left)/r.width  * gridN),0,gridN-1);
    const y = clamp(Math.floor((e.clientY-r.top )/r.height * gridN),0,gridN-1);
    return {x,y};
  }
  function putPixel(x,y,hex){ pctx.fillStyle=hex; pctx.fillRect(x,y,1,1); }

    function stampBrush(cx, cy, hex){
    const r  = Math.floor(brushSize/2);
    const r2 = r*r;
    for (let y = cy - r; y <= cy + r; y++){
      if (y < 0 || y >= gridN) continue;
      for (let x = cx - r; x <= cx + r; x++){
        if (x < 0 || x >= gridN) continue;
        const dx = x - cx, dy = y - cy;
        if ((dx*dx + dy*dy) <= r2) putPixel(x,y,hex);
      }
    }
  }

  function endStroke(e){
    state.down = false;
    state.last = null;
    dragStart = null;
    snapshot = null;
    state.quickErase = false;
    paint.releasePointerCapture?.(e.pointerId);
    applyCursor();
  }

  function strokeBrush(x0, y0, x1, y1, hex){
    const dx = x1 - x0, dy = y1 - y0;
    const steps = Math.max(Math.abs(dx), Math.abs(dy));
    if (steps === 0){ stampBrush(x0,y0,hex); return; }
    for (let i=0;i<=steps;i++){
      const t = i/steps;
      const x = Math.round(x0 + dx*t);
      const y = Math.round(y0 + dy*t);
      stampBrush(x, y, hex);
    }
  }
  
  function strokePencil(x0, y0, x1, y1, hex){
    const dx = x1 - x0, dy = y1 - y0;
    const steps = Math.max(Math.abs(dx), Math.abs(dy));
    if (steps === 0){ putPixel(x0, y0, hex); return; }
    for (let i = 0; i <= steps; i++){
      const t = i / steps;
      const x = Math.round(x0 + dx * t);
      const y = Math.round(y0 + dy * t);
      putPixel(x, y, hex);
    }
  }

  function stampEraserSquare(cx, cy){
    const s = eraserSize;
    const r = Math.floor(s/2);
    const xa = Math.max(0, cx - r);
    const ya = Math.max(0, cy - r);
    const xb = Math.min(gridN - 1, cx + (s % 2 ? r : r - 1));
    const yb = Math.min(gridN - 1, cy + (s % 2 ? r : r - 1));
    const w = Math.max(1, xb - xa + 1);
    const h = Math.max(1, yb - ya + 1);
    pctx.clearRect(xa, ya, w, h);
  }

  function strokeEraserSquare(x0, y0, x1, y1){
    const dx = x1 - x0, dy = y1 - y0;
    const steps = Math.max(Math.abs(dx), Math.abs(dy));
    if (steps === 0){ stampEraserSquare(x0, y0); return; }
    for (let i=0;i<=steps;i++){
      const t = i/steps;
      const x = Math.round(x0 + dx*t);
      const y = Math.round(y0 + dy*t);
      stampEraserSquare(x, y);
    }
  }

  function strokeEraser(x0, y0, x1, y1){
    const dx = x1 - x0, dy = y1 - y0;
    const steps = Math.max(Math.abs(dx), Math.abs(dy));
    if (steps === 0){ pctx.clearRect(x0, y0, 1, 1); return; }
    for (let i = 0; i <= steps; i++){
      const t = i / steps;
      const x = Math.round(x0 + dx * t);
      const y = Math.round(y0 + dy * t);
      pctx.clearRect(x, y, 1, 1);
    }
  }

  function drawLine(x0,y0,x1,y1,hex){
    let dx=Math.abs(x1-x0), sx=x0<x1?1:-1, dy=-Math.abs(y1-y0), sy=y0<y1?1:-1, err=dx+dy;
    while(true){ putPixel(x0,y0,hex); if(x0===x1&&y0===y1) break;
      const e2=2*err; if(e2>=dy){ err+=dy; x0+=sx; } if(e2<=dx){ err+=dx; y0+=sy; } }
  }
  function drawRectStroke(x0,y0,x1,y1,hex){
    const xa=Math.min(x0,x1), xb=Math.max(x0,x1), ya=Math.min(y0,y1), yb=Math.max(y0,y1);
    for(let x=xa;x<=xb;x++){ putPixel(x,ya,hex); putPixel(x,yb,hex); }
    for(let y=ya;y<=yb;y++){ putPixel(xa,y,hex); putPixel(xb,y,hex); }
  }
  function drawRectFill(x0,y0,x1,y1,hex){
    const xa=Math.min(x0,x1), xb=Math.max(x0,x1), ya=Math.min(y0,y1), yb=Math.max(y0,y1);
    pctx.fillStyle=hex; pctx.fillRect(xa,ya,(xb-xa+1),(yb-ya+1));
  }
  function drawEllipseStroke(x0,y0,x1,y1,hex){
    const cx=(x0+x1)/2, cy=(y0+y1)/2, rx=Math.abs(x1-x0)/2, ry=Math.abs(y1-y0)/2;
    const steps=Math.max(32, Math.ceil(2*Math.PI*Math.max(rx,ry)*2));
    for(let i=0;i<steps;i++){
      const t=i/steps*2*Math.PI;
      const x=Math.round(cx+rx*Math.cos(t)), y=Math.round(cy+ry*Math.sin(t));
      if(x>=0&&x<gridN&&y>=0&&y<gridN) putPixel(x,y,hex);
    }
  }

  function drawEllipseFill(x0,y0,x1,y1,hex){
    const cx=(x0+x1)/2, cy=(y0+y1)/2, rx=Math.abs(x1-x0)/2, ry=Math.abs(y1-y0)/2;
    pctx.fillStyle=hex;
    for(let y=Math.floor(cy-ry); y<=Math.ceil(cy+ry); y++){
      const dy=(y-cy)/ry; if(!Number.isFinite(dy)) continue;
      const dx=rx*Math.sqrt(Math.max(0,1-dy*dy));
      const xl=Math.floor(cx-dx), xr=Math.ceil(cx+dx);
      pctx.fillRect(Math.max(0,xl), y, Math.max(0,xr-xl+1), 1);
    }
    // also add stroke to smooth the edge
    drawEllipseStroke(x0,y0,x1,y1,hex);
  }

  // ====== Flood fill (RGBA-accurate, fills transparent) ======
  function rgbaEq(a,b){ return a[0]===b[0]&&a[1]===b[1]&&a[2]===b[2]&&a[3]===b[3]; }
  function hexToRgb(hex){
    const m = /^#?([0-9a-f]{6})$/i.exec(hex);
    if (!m) return [0,0,0];
    const n = parseInt(m[1],16);
    return [(n>>16)&255,(n>>8)&255,n&255];
  }

  /**
   * Tolerant flood fill
   * @param {number} x0 start x (cell coords)
   * @param {number} y0 start y (cell coords)
   * @param {string} fillHex target color like "#ff00aa"
   * @param {number} tol color tolerance (0..255), default 12
   *        (use 0 for exact match; ~12–24 works well for AA/noise)
   */
  function floodFill(x0, y0, fillHex, tol = 14){
    const [fr, fg, fb] = hexToRgb(fillHex);
    const w = gridN, h = gridN;

    // snapshot once
    const img = pctx.getImageData(0, 0, w, h);
    const d   = img.data;
    const idx = (x,y) => (y*w + x) * 4;

    // seed color (with alpha)
    const i0 = idx(x0, y0);
    const sr = d[i0], sg = d[i0+1], sb = d[i0+2], sa = d[i0+3];

    // quick exit if seed is already (approximately) the fill color
    const same = (r,g,b,a) =>
      Math.abs(r-fr) <= tol && Math.abs(g-fg) <= tol &&
      Math.abs(b-fb) <= tol && a === 255;

    if (same(sr,sg,sb,sa)) return;

    // Use squared distance for tolerance (faster & smoother)
    const T2 = tol * tol;
    const near = (r,g,b,a) => {
      // treat fully transparent seed uniformly
      if (sa === 0) return a === 0;
      const dr = r - sr, dg = g - sg, db = b - sb;
      return (dr*dr + dg*dg + db*db) <= T2 && a === sa; 
    };

    const seen = new Uint8Array(w*h);
    const stack = [[x0,y0]];

    while (stack.length){
      const [x,y] = stack.pop();
      if (x<0||x>=w||y<0||y>=h) continue;
      const i = idx(x,y);
      if (seen[i>>2]) continue;
      const r = d[i], g = d[i+1], b = d[i+2], a = d[i+3];
      if (!near(r,g,b,a)) continue;

      // write fill color (opaque)
      d[i] = fr; d[i+1] = fg; d[i+2] = fb; d[i+3] = 255;
      seen[i>>2] = 1;

      // 4-neighbours
      stack.push([x+1,y],[x-1,y],[x,y+1],[x,y-1]);
    }

    pctx.putImageData(img, 0, 0);
  }

// Helper: return null if pointer is outside the paintable area
function cellFromEventOrNull(e){
  const r = paint.getBoundingClientRect();
  const px = (e.clientX - r.left) / r.width  * gridN;
  const py = (e.clientY - r.top ) / r.height * gridN;
  if (px < 0 || px >= gridN || py < 0 || py >= gridN) return null;
  return { x: Math.floor(px), y: Math.floor(py) };
}

// ====== Pointer handling (stop drawing when leaving canvas) ======
let dragStart = null, snapshot = null;

function onPointer(type, e){
  if (type === 'cancel' || type === 'leave') {
    endStroke(e);
    return;
  }

  if (type === 'down'){
    const pos = cellFromEventOrNull(e);
    if (state.tool === 'cursor') { return; }
    if (e.button !== 2) state.quickErase = false;
    if (!pos) return; // ignore press events that start outside the paintable area
    state.down = true; state.last = null;
    dragStart = pos;

    if (e.button === 2) { // quick erase
      state.down = true; state.last = null; state.quickErase = true;
      paint.setPointerCapture?.(e.pointerId);
      paint.style.cursor = CURSORS.eraser;
      pushUndo();
      pctx.clearRect(pos.x, pos.y, 1, 1);
      state.last = pos;
      return;
    }

    paint.setPointerCapture?.(e.pointerId);

    if (state.tool === 'fill'){ pushUndo(); floodFill(pos.x,pos.y,state.color); return; }

    if (state.tool === 'pencil' || state.tool === 'eraser' || state.tool === 'picker' || state.tool === 'brush'){
      pushUndo();
      if (state.tool === 'pencil') {
        putPixel(pos.x,pos.y,state.color);
        state.last = pos; // start of stroke for interpolation
      }
      else if (state.tool === 'eraser') {
        pctx.clearRect(pos.x,pos.y,1,1);
        stampEraserSquare(pos.x, pos.y);
        state.last = pos;
      }
      else if (state.tool === 'brush') {
        stampBrush(pos.x,pos.y,state.color);
        state.last = pos;
      }
      else { // picker
        const px = pctx.getImageData(pos.x,pos.y,1,1).data;
        if (px[3] !== 0) {              // ignore fully transparent picks
          pickNearestAndSelect(px[0], px[1], px[2]); // press swatch
        }
      }
      return;
    }

    // begin shape preview
    snapshot = pctx.getImageData(0,0,gridN,gridN);
    return;
  }

  if (type === 'move'){
    if (!state.down) return;

    if (state.quickErase){
      const pos = cellFromEventOrNull(e);
      if (!pos){ state.down=false; state.quickErase=false; paint.releasePointerCapture?.(e.pointerId); return; }
      const last = state.last || pos;
      strokeEraser(last.x, last.y, pos.x, pos.y); // 1×1 path
      state.last = pos;
      return;
    }

    const pos = cellFromEventOrNull(e);
    if (!pos){
      // pointer left the canvas; terminate the current stroke immediately
      state.down = false; state.last = null; dragStart = null; snapshot = null;
      paint.releasePointerCapture?.(e.pointerId);
      return;
    }
    const {x,y} = pos;

    if (state.tool === 'pencil'){
      const last = state.last || {x, y};
      const dx = x - last.x, dy = y - last.y;
      const steps = Math.max(Math.abs(dx), Math.abs(dy));
      if (steps === 0) {
        putPixel(x, y, state.color);
      } else {
        for (let i = 0; i <= steps; i++){
          const t = i / steps;
          const xi = Math.round(last.x + dx * t);
          const yi = Math.round(last.y + dy * t);
          putPixel(xi, yi, state.color);
        }
      }
      state.last = {x,y}; return;
    }

    if (state.tool === 'eraser') {
      const last = state.last || {x, y};
      if (last.x === x && last.y === y) {
        // single point
        stampEraserSquare(x, y);
      } else {
        // line stroke
        strokeEraserSquare(last.x, last.y, x, y);
      }
      state.last = {x, y};
      return;
    }

    if (state.tool === 'brush'){
      const last = state.last || {x,y};
      strokeBrush(last.x, last.y, x, y, state.color);
      state.last = {x,y}; return;
    }

    if (state.tool === 'picker') return;

    // live preview for geometric tools
    if (snapshot){
      pctx.putImageData(snapshot,0,0);
      const sx = dragStart.x, sy = dragStart.y;
      if (state.tool === 'line')       drawLine(sx,sy,x,y,state.color);
      else if (state.tool === 'rect')  drawRectStroke(sx,sy,x,y,state.color);
      else if (state.tool === 'rectf') drawRectFill(sx,sy,x,y,state.color);
      else if (state.tool === 'circ')  drawEllipseStroke(sx,sy,x,y,state.color);
      else if (state.tool === 'circf') drawEllipseFill(sx,sy,x,y,state.color);
    }
    return;
  }

  if (type === 'up'){
    if (!state.down) return;

    // --- quick erase: finish and RESET the flag ---
    if (state.quickErase){
      const pos = cellFromEventOrNull(e);
      if (pos){
        const last = state.last || pos;
        strokeEraser(last.x, last.y, pos.x, pos.y);
        state.last = pos;
      }
      endStroke(e);
      return;
    }

    const pos = cellFromEventOrNull(e);
    if (['line','rect','rectf','circ','circf'].includes(state.tool) && snapshot && pos){
      pushUndo();
      pctx.putImageData(snapshot,0,0);
      const sx = dragStart.x, sy = dragStart.y;
      const {x,y} = pos;
      if (state.tool === 'line')       drawLine(sx,sy,x,y,state.color);
      else if (state.tool === 'rect')  drawRectStroke(sx,sy,x,y,state.color);
      else if (state.tool === 'rectf') drawRectFill(sx,sy,x,y,state.color);
      else if (state.tool === 'circ')  drawEllipseStroke(sx,sy,x,y,state.color);
      else if (state.tool === 'circf') drawEllipseFill(sx,sy,x,y,state.color);
    }
    state.down = false; state.last = null; dragStart = null; snapshot = null;
    paint.releasePointerCapture?.(e.pointerId);
  }
  endStroke(e);
}

// Event wiring
paint.addEventListener('pointerdown', e => onPointer('down', e));
paint.addEventListener('pointermove', e => onPointer('move', e));
paint.addEventListener('pointerup',   e => onPointer('up',   e));
paint.addEventListener('pointercancel', e => onPointer('cancel', e));
paint.addEventListener('contextmenu', e => e.preventDefault());
paint.addEventListener('pointerleave', e => {
  if (!paint.hasPointerCapture || !paint.hasPointerCapture(e.pointerId)) {
    onPointer('leave', e);
  }
});

// ====== Import / Generate ======
async function importFile(file){
  if (!file) return;

  // Revoke previous object URL to avoid leaks
  if (_lastObjUrl) URL.revokeObjectURL(_lastObjUrl);
  _lastObjUrl = URL.createObjectURL(file);

  const img = new Image();
  img.src = _lastObjUrl;
  await img.decode();

  lastImage = img;                // remember for reapply
  drawImportedFitQuantized(img);  // draw + clamp to palette
}

// Ensure re-selecting the *same* file triggers the change event
upInput?.addEventListener('click', () => { upInput.value = ''; });

upInput?.addEventListener('change', (e) => {
  importFile(e.target.files?.[0]);
  // Clear after handling as well (covers browser quirks)
  e.target.value = '';
});

// --- mini card wiring ---
const miniUpload = document.getElementById('miniUpload');

// click / keyboard opens the hidden input (and clears it first)
miniUpload?.addEventListener('click', () => {
  if (!upInput) return;
  upInput.value = '';
  upInput.click();
});
miniUpload?.addEventListener('keydown', (e) => {
  if (e.key === 'Enter' || e.key === ' ') {
    e.preventDefault();
    if (!upInput) return;
    upInput.value = '';
    upInput.click();
  }
});

// drag & drop on the card
['dragenter','dragover'].forEach(t =>
  miniUpload?.addEventListener(t, (e)=>{ e.preventDefault(); e.dataTransfer.dropEffect='copy'; miniUpload.classList.add('is-dragover'); })
);
['dragleave','drop'].forEach(t =>
  miniUpload?.addEventListener(t, ()=> miniUpload.classList.remove('is-dragover'))
);
miniUpload?.addEventListener('drop', (e) => {
  e.preventDefault();
  const f = (e.dataTransfer.files && e.dataTransfer.files[0]) || null;
  importFile(f);
});

// paste anywhere
document.addEventListener('paste', (e) => {
  const items = e.clipboardData?.items || [];
  for (const it of items){
    if (it.type && it.type.startsWith('image/')){
      const f = it.getAsFile();
      if (f) { importFile(f); break; }
    }
  }
});

let _genHintTimer = null;
function showGenHint(text, timeoutMs = 0){
  if (!genHint) return;
  genHint.textContent = text;
  if (_genHintTimer) clearTimeout(_genHintTimer);
  if (timeoutMs > 0){
    _genHintTimer = setTimeout(() => { genHint.textContent = ''; }, timeoutMs);
  }
}

async function generateFromPrompt(){
  const lang = (window.getCurrentLang?.() || 'en');
  const t = (k, fallback) => (window.translations?.[lang]?.[k] || fallback);

  const prompt = ($('#prompt').value || '').trim();
  if (!prompt){
    showGenHint(t('typePrompt','Type a prompt first'));
    return;
  }

  const prevDisabled = !!genBtn?.disabled;
  if (genBtn){ genBtn.disabled = true; genBtn.setAttribute('aria-busy','true'); }

  showGenHint(t('generating','Generating…'));

  try{
    const url = 'https://image.pollinations.ai/prompt/' +
                encodeURIComponent(prompt) + '?n=1&size=512x512';

    const res = await fetch(url, { cache: 'no-store' });
    if (!res.ok) throw new Error(`HTTP ${res.status}`);

    const blob = await res.blob();

    // Revoke previous object URL to avoid leaks
    if (_lastObjUrl) URL.revokeObjectURL(_lastObjUrl);
    _lastObjUrl = URL.createObjectURL(blob);

    const img = new Image();
    img.src = _lastObjUrl;
    await img.decode();

    lastImage = img;
    drawImportedFitQuantized(img);

    showGenHint(t('done','Done ✓'), 2000);
  }catch(err){
    console.error(err);
    showGenHint(t('genFailed','Generation failed'), 3000);
  }finally{
    if (genBtn){
      genBtn.disabled = prevDisabled;
      genBtn.removeAttribute('aria-busy');
    }
  }
}

genBtn?.addEventListener('click', generateFromPrompt);

  // ====== Top-level UI ======
  gridSel.addEventListener('change', e=>{ gridN=parseInt(e.target.value,10)||32; resizeLogical(); });
  zoomSel.addEventListener('input', e=>{
    zoom = parseInt(e.target.value,10) || 12;
    applyZoom();
    if (showGrid) drawGrid();
  });
  gridBtn.addEventListener('click', ()=>{
    showGrid = !showGrid;
    localStorage.setItem(GRID_PREF_KEY, JSON.stringify(showGrid));
    syncGridButton();
    drawGrid();
  });
  clearBtn.addEventListener('click', ()=> pctx.clearRect(0,0,gridN,gridN));
// True-size export by default. Hold Alt while clicking to export at 8×.
dlBtn.addEventListener('click', (e) => {
  e.preventDefault();

  // Block transparent/empty downloads
  const lang = (window.getCurrentLang?.() || 'en');
  const dict = (window.translations?.[lang] || {});
  const msgNoImg = dict.imageNotFound || 'No image to download.';

  // Prefer the live paint canvas reference if you have it, else fallback by id
  const c = (typeof paint !== 'undefined' && paint) ? paint : document.getElementById('paintCanvas');

  if (!c || isCanvasEmpty(c)) {
    if (typeof showToast === 'function') showToast(msgNoImg, 'error');
    else alert(msgNoImg);
    return;
  }

  const upscale = e.altKey ? 8 : 1;   // Alt = upscale 8×
  const out = document.createElement('canvas');
  out.width  = c.width  * upscale;
  out.height = c.height * upscale;

  const o = out.getContext('2d');
  o.imageSmoothingEnabled = false;
  o.drawImage(c, 0, 0, out.width, out.height);

  const a = document.createElement('a');
  a.download = upscale === 1
    ? `pixel-${c.width}x${c.height}.png`
    : `pixel-${c.width}x${c.height}@${upscale}x.png`;
  a.href = out.toDataURL('image/png');
  a.click();
});


// ====== Brush popover handling (tools-only close) ======
(function setupBrushPopover(){
  if (!toolBrush || !brushPopover) return;

  // mount on <body>
  if (brushPopover.parentElement !== document.body) {
    document.body.appendChild(brushPopover);
  }

  // swatches
  brushPopover.innerHTML = '';
  BRUSH_SIZES.forEach(sz => {
    const btn = document.createElement('button');
    btn.type = 'button';
    btn.className = 'brush-size-swatch';
    btn.dataset.size = String(sz);
    btn.title = `Brush ${sz}`;
    btn.addEventListener('click', (e) => {
      e.stopPropagation();
      brushSize = sz;
      brushPopover.querySelectorAll('.brush-size-swatch')
        .forEach(b => b.setAttribute('aria-pressed','false'));
      btn.setAttribute('aria-pressed','true');
      setTool('brush');
    });
    brushPopover.appendChild(btn);
  });

  function positionPopover(){
    const r = toolBrush.getBoundingClientRect();
    brushPopover.style.position = 'fixed';
    brushPopover.style.top  = `${Math.round(r.bottom + 6)}px`;
    brushPopover.style.left = `${Math.round(r.left)}px`;
  }
  function showPopover(){
    positionPopover();
    brushPopover.hidden = false;
    brushPopover.setAttribute('aria-hidden','false');
  }
  function hidePopover(){
    brushPopover.hidden = true;
    brushPopover.setAttribute('aria-hidden','true');
  }

  // toggle on brush click
  toolBrush.addEventListener('click', (e) => {
    e.stopPropagation();
    if (brushPopover.hidden) { setTool('brush'); showPopover(); }
    else { hidePopover(); }
  });

  // Close only on:
  const toolsPanel = document.querySelector('.gp-right');
  function onGlobalPointerDown(e){
    if (brushPopover.hidden) return;
    const path = e.composedPath ? e.composedPath() : [];
    const insidePopover = path.includes(brushPopover);
    const insideTools   = toolsPanel && path.includes(toolsPanel);
    const isToolBtn     = path.some(el => el instanceof HTMLElement && el.classList?.contains('toolbtn'));

    // Clicking a tool closes (including brush)
    if (isToolBtn && !insidePopover) { hidePopover(); return; }

    // Clicking outside both popover and tools panel closes
    if (!insidePopover && !insideTools) { hidePopover(); }
  }
  // capturing so it works even if something stops propagation
  document.addEventListener('pointerdown', onGlobalPointerDown, true);

  window.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') hidePopover();
  });

    // Close on any scroll (page or inner scrollable containers)
  function onAnyScroll(){
    if (!brushPopover.hidden) hidePopover();
  }
  // capture phase so we catch scrolls from inner panels too
  document.addEventListener('scroll', onAnyScroll, true);

  // Keep position correct if the window is resized
  window.addEventListener('resize', () => {
    if (!brushPopover.hidden) positionPopover();
  });


  // Hide when changing to any other tool
  const __setTool = setTool;
  setTool = function(t){
    if (t !== 'brush') hidePopover();
    __setTool(t);
  };
})();

// ====== Eraser popover handling (tools-only close) ======
(function setupEraserPopover(){
  const eraserPopover = document.getElementById('eraserSizePopover');
  if (!toolEraser || !eraserPopover) return;

  // mount on <body>
  if (eraserPopover.parentElement !== document.body) {
    document.body.appendChild(eraserPopover);
  }

  // build size chips
  eraserPopover.innerHTML = '';
  ERASER_SIZES.forEach(sz => {
    const btn = document.createElement('button');
    btn.type = 'button';
    btn.className = 'brush-size-swatch';
    btn.dataset.size = String(sz);
    btn.title = `Eraser ${sz}`;
    btn.addEventListener('click', (e) => {
      e.stopPropagation();
      eraserSize = sz;
      eraserPopover.querySelectorAll('.brush-size-swatch')
        .forEach(b => b.setAttribute('aria-pressed','false'));
      btn.setAttribute('aria-pressed','true');
      setTool('eraser');
    });
    eraserPopover.appendChild(btn);
  });

  function positionPopover(){
    const r = toolEraser.getBoundingClientRect();
    eraserPopover.style.position = 'fixed';
    eraserPopover.style.top  = `${Math.round(r.bottom + 6)}px`;
    eraserPopover.style.left = `${Math.round(r.left)}px`;
  }
  function showPopover(){
    positionPopover();
    eraserPopover.hidden = false;
    eraserPopover.setAttribute('aria-hidden','false');
  }
  function hidePopover(){
    eraserPopover.hidden = true;
    eraserPopover.setAttribute('aria-hidden','true');
  }

  // toggle on eraser click
  toolEraser.addEventListener('click', (e) => {
    e.stopPropagation();
    if (eraserPopover.hidden) { setTool('eraser'); showPopover(); }
    else { hidePopover(); }
  });

  // close behaviors (same pattern as brush)
  const toolsPanel = document.querySelector('.gp-right');
  function onGlobalPointerDown(e){
    if (eraserPopover.hidden) return;
    const path = e.composedPath ? e.composedPath() : [];
    const insidePopover = path.includes(eraserPopover);
    const insideTools   = toolsPanel && path.includes(toolsPanel);
    const isToolBtn     = path.some(el => el instanceof HTMLElement && el.classList?.contains('toolbtn'));
    if (isToolBtn && !insidePopover) { hidePopover(); return; }
    if (!insidePopover && !insideTools) { hidePopover(); }
  }
  document.addEventListener('pointerdown', onGlobalPointerDown, true);

  window.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') hidePopover();
  });

  // Hide on any scroll
  function onAnyScroll(){ if (!eraserPopover.hidden) hidePopover(); }
  document.addEventListener('scroll', onAnyScroll, true);

  // Reposition on resize
  window.addEventListener('resize', () => {
    if (!eraserPopover.hidden) positionPopover();
  });

  // Ensure it closes when switching to another tool
  const __setTool2 = setTool;
  setTool = function(t){
    if (t !== 'eraser') hidePopover();
    __setTool2(t);
  };
})();

// Add to Gallery logic
(() => {
  // Helper: check if a canvas is fully transparent (no pixels drawn)
  function canvasIsEmpty(c) {
    if (!c || !c.width || !c.height) return true;
    const ctx = c.getContext("2d");
    const { data } = ctx.getImageData(0, 0, c.width, c.height);
    for (let i = 3; i < data.length; i += 4) {
      if (data[i] !== 0) return false; // found a non-transparent pixel
    }
    return true;
  }

  // Helper: save PNG blob to the same IndexedDB used by the Gallery
  async function saveImageToGallery(blob) {
    return new Promise((resolve, reject) => {
      const req = indexedDB.open("wplaceGallery", 1);
      req.onupgradeneeded = () => {
        const db = req.result;
        if (!db.objectStoreNames.contains("images")) {
          const store = db.createObjectStore("images", { keyPath: "id", autoIncrement: true });
          store.createIndex("created", "created", { unique: false });
          store.createIndex("name", "name", { unique: false });
        }
      };
      req.onsuccess = () => {
        const db = req.result;
        const tx = db.transaction("images", "readwrite");
        const store = tx.objectStore("images");
        store.add({ blob, created: Date.now() });
        tx.oncomplete = resolve;
        tx.onerror = reject;
      };
      req.onerror = () => reject(req.error);
    });
  }

  // Bind "Add to Gallery" button
  document.addEventListener("DOMContentLoaded", () => {
    const btn = document.getElementById("addToGallery");
    if (!btn || btn.dataset.bound === "true") return;
    btn.dataset.bound = "true";

    btn.addEventListener("click", () => {
      try {
        // Use the Studio paint canvas
        const c = document.getElementById("paintCanvas");

        // Translations (fallbacks if missing)
        const lang = (typeof getCurrentLang === "function" ? getCurrentLang() : "en");
        const dict = (typeof window.translations !== "undefined" && window.translations[lang]) || {};
        const msgNoImg   = dict.imageNotFound || "No image to add.";
        const msgSaved   = dict.imageSaved    || "Added to gallery!";
        const msgFailed  = dict.saveFailed    || "Failed to save image.";
        const msgStorage = dict.storageFull   || "Your browser storage is full. Remove some items from the gallery and try again.";

        // No canvas / zero size / fully transparent → toast error
        if (!c || !c.width || !c.height || canvasIsEmpty(c)) {
          if (typeof showToast === "function") showToast(msgNoImg, "error");
          else alert(msgNoImg);
          return;
        }

        // Prevent double clicks while we save
        btn.disabled = true;
        btn.setAttribute("aria-busy", "true");

        const finish = async (blob) => {
          btn.disabled = false;
          btn.removeAttribute("aria-busy");
          if (!blob) {
            if (typeof showToast === "function") showToast(msgFailed, "error");
            else alert(msgFailed);
            return;
          }
          try {
            await saveImageToGallery(blob);
            if (typeof showToast === "function") showToast(msgSaved, "success");
            else alert(msgSaved);
          } catch (err) {
            console.error(err);
            const msg = String(err).toLowerCase().includes("quota") ? msgStorage : msgFailed;
            if (typeof showToast === "function") showToast(msg, "error");
            else alert(msg);
          }
        };

        // Prefer async toBlob; fallback to dataURL for older browsers
        if (c.toBlob) {
          c.toBlob(finish, "image/png");
        } else {
          const dataURL = c.toDataURL("image/png");
          const b64 = (dataURL.split(",")[1] || "");
          const bin = atob(b64);
          const u8  = new Uint8Array(bin.length);
          for (let i = 0; i < bin.length; i++) u8[i] = bin.charCodeAt(i);
          finish(new Blob([u8], { type: "image/png" }));
        }
      } catch (e) {
        console.error(e);
      }
    });
  });
})();


// ====== Init ======
function init(){
  buildPalette();
  setColor('#000000');
  zoom = parseInt(zoomSel?.value || '12', 10);
  resizeLogical();
  applyZoom();
  window.initLang?.();
  syncGridButton();
  document.getElementById('lang-select')
    ?.addEventListener('change', () => syncGridButton());

  // --- custom cursor toggle ---
  const customCursorKey = 'studio.customCursors';
  const toggle = document.getElementById('toggleCursors');
  if (toggle){
    const saved = localStorage.getItem(customCursorKey);
    if (saved !== null) toggle.checked = (saved === '1');

    const setCursorsEnabled = (on) => {
      state.customCursors = !!on;
      applyCursor();
    };

    setCursorsEnabled(toggle.checked);

    toggle.addEventListener('change', () => {
      localStorage.setItem(customCursorKey, toggle.checked ? '1' : '0');
      setCursorsEnabled(toggle.checked);
    });
  }

  applyCursor();
}

if (document.readyState !== 'loading') init();
else document.addEventListener('DOMContentLoaded', init);
})();